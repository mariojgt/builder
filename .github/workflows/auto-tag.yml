name: Auto Tag Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  auto-tag:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: get_latest_tag
      run: |
        # Get the latest tag, if no tags exist, start with v0.0.0
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        echo "Latest tag: $latest_tag"

    - name: Determine version bump
      id: version_bump
      run: |
        # Get commit messages since last tag
        if [ "${{ steps.get_latest_tag.outputs.latest_tag }}" = "v0.0.0" ]; then
          # If no previous tags, get all commits
          commit_messages=$(git log --pretty=format:"%s" HEAD)
        else
          # Get commits since last tag
          commit_messages=$(git log --pretty=format:"%s" ${{ steps.get_latest_tag.outputs.latest_tag }}..HEAD)
        fi

        echo "Commit messages:"
        echo "$commit_messages"

        # Determine bump type based on commit messages
        bump_type="patch"  # default

        # Check for major version keywords
        if echo "$commit_messages" | grep -iE "(major|breaking|BREAKING CHANGE)" > /dev/null; then
          bump_type="major"
        # Check for minor version keywords
        elif echo "$commit_messages" | grep -iE "(minor|feat|feature)" > /dev/null; then
          bump_type="minor"
        # Check for patch version keywords
        elif echo "$commit_messages" | grep -iE "(patch|fix|bugfix|hotfix)" > /dev/null; then
          bump_type="patch"
        fi

        echo "bump_type=$bump_type" >> $GITHUB_OUTPUT
        echo "Determined bump type: $bump_type"

    - name: Calculate new version
      id: new_version
      run: |
        latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
        bump_type="${{ steps.version_bump.outputs.bump_type }}"

        # Remove 'v' prefix if present
        version=${latest_tag#v}

        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$version"
        major=${VERSION_PARTS[0]:-0}
        minor=${VERSION_PARTS[1]:-0}
        patch=${VERSION_PARTS[2]:-0}

        # Bump version based on type
        case $bump_type in
          "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          "minor")
            minor=$((minor + 1))
            patch=0
            ;;
          "patch")
            patch=$((patch + 1))
            ;;
        esac

        new_version="v$major.$minor.$patch"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "New version: $new_version"

    - name: Check if tag already exists
      id: check_tag
      run: |
        new_version="${{ steps.new_version.outputs.new_version }}"
        if git rev-parse "$new_version" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Tag $new_version already exists"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "Tag $new_version does not exist"
        fi

    - name: Create and push new tag
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        new_version="${{ steps.new_version.outputs.new_version }}"
        latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
        bump_type="${{ steps.version_bump.outputs.bump_type }}"

        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Create tag with message
        tag_message="Auto-release $new_version (${bump_type} bump from ${latest_tag})"
        git tag -a "$new_version" -m "$tag_message"

        # Push the tag
        git push origin "$new_version"

        echo "Created and pushed tag: $new_version"

    - name: Create GitHub Release
      if: steps.check_tag.outputs.tag_exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.new_version }}
        release_name: Release ${{ steps.new_version.outputs.new_version }}
        body: |
          Auto-generated release ${{ steps.new_version.outputs.new_version }}

          **Version bump type:** ${{ steps.version_bump.outputs.bump_type }}
          **Previous version:** ${{ steps.get_latest_tag.outputs.latest_tag }}

          ### Changes
          This release includes all commits since ${{ steps.get_latest_tag.outputs.latest_tag }}.

          ### Installation
          ```bash
          composer require mariojgt/builder:${{ steps.new_version.outputs.new_version }}
          ```
        draft: false
        prerelease: false
